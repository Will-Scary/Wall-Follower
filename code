#include <kipr/wombat.h>
//DECLARE VARIABLES
int rmotor = 0;
int lmotor = 3;
int speed = 65;
int nspeed = -65;
int pause = 1000;
int pause2 = 1750;
int raturn = 1477;
int fturn = 2954;
int shortpause = 100;
int counter = 0;

//declare function
void forward();
void turnleft();
void backward();
void vearright();
void vearleft();
void smallforward();
void forwardtweak();


int main()
{

	forwardtweak();
    
	
        turnleft(); 
    smallforward();
      turnleft();
    
    
      
	forwardtweak();
  	
        
  
    
    if (analog(5) > 2910)
    {		
        ao();    
      
    }
    return 0;
   
}

//DECLARE FUNCTIONS
void turnleft()
{
    printf("turning left\n");
    motor(rmotor, speed); //first argument = port#0, 2nd arg = power and direction
    motor(lmotor, nspeed); 
    msleep(500);
 
}
void vearleft()
{
    motor(lmotor, -5); //first argument = port#0, 2nd arg = power and direction
    motor(rmotor, 100); 
   
}

void vearright()
{
    printf("turning right\n");
    motor(lmotor, 20); //first argument = port#0, 2nd arg = power and direction
    motor(rmotor, 0); 
  
}
void forward()
{
    printf("Driving forward\n");
    motor(rmotor,speed); //first argument = port#0, 2nd arg = power and direction
    motor(lmotor,speed); 
  
}



void backward()
{
    printf("Driving backward\n");
    motor(rmotor, nspeed); //first argument = port#0, 2nd arg = power and direction
    motor(lmotor,nspeed); 
      
}

void smallforward()
{
    printf("Driving forward\n");
    motor(rmotor,speed); //first argument = port#0, 2nd arg = power and direction
    motor(lmotor,speed); 
    msleep(950);
}

void forwardtweak()
{
       while(analog(5) < 2900)
    {		
        forward();
        
          
    if(analog(0) < 3800)
    {
    vearleft();
    }
     
    } 
}
